{"version":3,"sources":["components/EditorComponent.js","components/PreviewComponent.js","components/BodyContainer.js","App.js","reportWebVitals.js","index.js"],"names":["EditorComponent","id","className","onChange","this","props","handleChange","value","input","Component","PreviewComponent","console","log","dangerouslySetInnerHTML","__html","BodyContainer","state","bind","e","setState","target","markdown","marked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAEqBA,E,4JACjB,WACI,OACI,qBAAKC,GAAG,aAAR,SACI,sBAAKA,GAAG,iBAAR,UACI,qBAAKC,UAAU,SAAf,SACI,oBAAIA,UAAU,iBAAd,sBAEJ,0BACAD,GAAG,SACHE,SAAUC,KAAKC,MAAMC,aACrBC,MAAOH,KAAKC,MAAMG,MAHlB,wC,GARyBC,aCAxBC,E,4JACjB,WAEI,OADAC,QAAQC,IAAI,oBAAqBR,KAAKC,MAAMG,OAExC,qBAAKP,GAAG,cAAR,SACI,sBAAKA,GAAG,kBAAR,UACI,qBAAKC,UAAU,SAAf,SACI,oBAAIA,UAAU,iBAAd,uBAEJ,mBAAGW,wBAAyB,CAACC,OAAOV,KAAKC,MAAMG,OAAQP,GAAG,qB,GAThCQ,a,iBCIzBM,E,kDACjB,WAAYV,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAQ,CACTR,MAAO,0tCAEX,EAAKF,aAAe,EAAKA,aAAaW,KAAlB,gBALN,E,gDAQlB,SAAaC,GACTd,KAAKe,SAAS,CACVX,MAAQU,EAAEE,OAAOb,U,oBAGzB,WACI,IAAMc,EAAWC,IAAOlB,KAAKY,MAAMR,OACnC,OACI,sBAAKP,GAAG,WAAR,UACI,cAAC,EAAD,CAAiBK,aAAcF,KAAKE,aAAcE,MAAOJ,KAAKY,MAAMR,QACpE,cAAC,EAAD,CAAkBA,MAAOa,W,GAnBEZ,aCK5Bc,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.868e506d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class EditorComponent extends Component {\n    render() {\n        return (\n            <div id=\"editor-box\">\n                <div id=\"editor-content\">\n                    <div className=\"header\">\n                        <h2 className=\"header-heading\">Editor</h2>\n                    </div>\n                    <textarea \n                    id=\"editor\"\n                    onChange={this.props.handleChange}\n                    value={this.props.input}>\n                        something for now\n                    </textarea>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class PreviewComponent extends Component {\n    render() {\n        console.log('input in preview '+ this.props.input);\n        return (\n            <div id=\"preview-box\">\n                <div id=\"preview-content\">\n                    <div className=\"header\">\n                        <h2 className=\"header-heading\">Preview</h2>\n                    </div>\n                    <p dangerouslySetInnerHTML={{__html:this.props.input}} id=\"preview\"></p>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport EditorComponent from './EditorComponent'\nimport PreviewComponent from './PreviewComponent'\nimport '../App.css';\nimport marked from 'marked';\n\nexport default class BodyContainer extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            input: '# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here\\'s some other cool stuff:\\n\\nHeres some code, `&lt;div&gt;&lt;/div&gt;`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == \\'```\\' &amp;&amp; lastLine == \\'```\\') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n\\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere\\'s also [links](https://www.freecodecamp.org), and\\n > Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | -------------\\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbered lists too.\\n1. Use just 1s if you want!\\n1. And last but not least, let\\'s not forget embedded images:\\n\\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\\n\\nfound a thrill \\'&lt;h1&gt;this&lt;/h1&gt;'\n        }\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n    handleChange(e) {\n        this.setState({\n            input : e.target.value\n        })\n    }    \n    render() {\n        const markdown = marked(this.state.input);\n        return (\n            <div id=\"body-box\">\n                <EditorComponent handleChange={this.handleChange} input={this.state.input}/> \n                <PreviewComponent input={markdown}/>\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport BodyContainer from './components/BodyContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}